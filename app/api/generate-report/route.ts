/**
 * @file: app/api/generate-report/route.ts
 * @responsibility: API route para gerar relat√≥rio personalizado com OpenAI
 * @exports: POST handler
 */

import { NextRequest, NextResponse } from "next/server";
import OpenAI from "openai";
import { QUESTIONS, type Segment } from "@/lib/questions";
import { getSegmentContent } from "@/lib/segments";
import {
  getZodiacSign,
  getZodiacInsights,
  getCompatibilityInsights,
} from "@/lib/astrology";
import { ReportFreePayload } from "@/types/report-free";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

interface DetailedAnswer {
  questionId: string;
  question: string;
  answer: string | string[];
  answerLabel: string;
  weight: number;
  segment: string;
  emoji: string;
}

interface GenerateReportRequest {
  segment: Segment;
  answers: Record<string, string | string[]>;
  detailedAnswers?: DetailedAnswer[];
  scores: Record<Segment, number>;
  birthdate?: string;
  exBirthdate?: string;
}

// ===================== Helpers =====================

function safeLog(...args: any[]) {
  if (process.env.NODE_ENV !== "production") {
    // eslint-disable-next-line no-console
    console.log(...args);
  }
}

const TEMPO_FIM_TO_DAYS: Record<string, number> = {
  "0-7": 5,
  "8-30": 20,
  "31-90": 60,
  "90+": 120,
};

type SymptomFlags = {
  sleepDisruption: boolean;
  severeInsomnia: boolean;
  appetiteLoss: boolean;
  emotionalEating: boolean;
  frequentSocialChecks: boolean;
  compulsiveSocialChecks: boolean;
  impulseToContact: boolean;
  romanticizingPast: boolean;
  intenseAnger: boolean;
  heavyGuilt: boolean;
  futureFeelsImpossible: boolean;
  lowEnergy: boolean;
  closedToNewConnections: boolean;
};

const DEFAULT_FLAGS: SymptomFlags = {
  sleepDisruption: false,
  severeInsomnia: false,
  appetiteLoss: false,
  emotionalEating: false,
  frequentSocialChecks: false,
  compulsiveSocialChecks: false,
  impulseToContact: false,
  romanticizingPast: false,
  intenseAnger: false,
  heavyGuilt: false,
  futureFeelsImpossible: false,
  lowEnergy: false,
  closedToNewConnections: false,
};

function deriveDaysSinceBreakup(
  answers: Record<string, string | string[]>
): number | null {
  const raw = answers["tempo_fim"];
  if (!raw || Array.isArray(raw)) {
    return null;
  }
  return TEMPO_FIM_TO_DAYS[raw] ?? null;
}

function deriveSymptomFlags(
  answers: Record<string, string | string[]>
): SymptomFlags {
  const flags: SymptomFlags = { ...DEFAULT_FLAGS };

  const sleep = answers["sono"];
  if (typeof sleep === "string") {
    if (["dificuldade", "acordo", "insonia"].includes(sleep)) {
      flags.sleepDisruption = true;
    }
    if (sleep === "insonia") {
      flags.severeInsomnia = true;
    }
  }

  const appetite = answers["apetite"];
  if (typeof appetite === "string") {
    if (["diminuiu", "sem_apetite"].includes(appetite)) {
      flags.appetiteLoss = true;
    }
    if (appetite === "aumentou") {
      flags.emotionalEating = true;
    }
  }

  const checks = answers["checagens"];
  if (typeof checks === "string") {
    if (["1-2", "3-5", "6+"].includes(checks)) {
      flags.frequentSocialChecks = true;
    }
    if (["3-5", "6+"].includes(checks)) {
      flags.compulsiveSocialChecks = true;
    }
  }

  const impulse = answers["impulso_contato"];
  if (typeof impulse === "string") {
    if (["frequente", "constante"].includes(impulse)) {
      flags.impulseToContact = true;
    }
  }

  const idealization = answers["idealizacao"];
  if (typeof idealization === "string") {
    if (["bastante", "totalmente"].includes(idealization)) {
      flags.romanticizingPast = true;
    }
  }

  const anger = answers["raiva"];
  if (typeof anger === "string") {
    if (["moderada", "intensa"].includes(anger)) {
      flags.intenseAnger = true;
    }
  }

  const guilt = answers["culpa"];
  if (typeof guilt === "string") {
    if (["frequente", "totalmente"].includes(guilt)) {
      flags.heavyGuilt = true;
    }
  }

  const future = answers["futuro"];
  if (typeof future === "string") {
    if (["nao", "dificil"].includes(future)) {
      flags.futureFeelsImpossible = true;
    }
  }

  const activities = answers["atividades"];
  if (typeof activities === "string") {
    if (["nao", "forcando"].includes(activities)) {
      flags.lowEnergy = true;
    }
  }

  const newConnections = answers["novas_conexoes"];
  if (typeof newConnections === "string") {
    if (["nao", "ainda_nao"].includes(newConnections)) {
      flags.closedToNewConnections = true;
    }
  }

  return flags;
}

function insightToTraits(insight?: string | null): string[] {
  if (!insight) return [];
  return insight
    .split(/[.;]\s+/)
    .map((piece) => piece.replace(/\.$/, "").trim())
    .filter((piece) => piece.length > 0);
}

const NAME_KEYS = ["name", "nome", "firstName", "leadName"];

function deriveFirstName(answers: Record<string, string | string[]>): string {
  for (const key of NAME_KEYS) {
    const value = answers[key];
    if (typeof value === "string") {
      const cleaned = value.trim();
      if (cleaned) {
        const firstToken = cleaned.split(/\s+/)[0];
        return firstToken.charAt(0).toUpperCase() + firstToken.slice(1);
      }
    }
  }
  return "Voc√™";
}

function deriveGender(
  answers: Record<string, string | string[]>
): "M" | "F" | null {
  const gender = answers["gender"];
  if (typeof gender === "string") {
    const normalized = gender.trim().toUpperCase();
    if (normalized === "M" || normalized === "MASCULINO") return "M";
    if (normalized === "F" || normalized === "FEMININO") return "F";
  }
  return null;
}

function getPronounSet(gender: "M" | "F" | null): {
  dele_dela: string;
  ele_ela: string;
  o_a: string;
  preso_presa: string;
  mesmo_mesma: string;
} {
  if (gender === "M") {
    return {
      dele_dela: "dele",
      ele_ela: "ele",
      o_a: "o",
      preso_presa: "preso",
      mesmo_mesma: "mesmo",
    };
  }
  return {
    dele_dela: "dela",
    ele_ela: "ela",
    o_a: "a",
    preso_presa: "presa",
    mesmo_mesma: "mesma",
  };
}

const FLAG_LABELS: Record<keyof SymptomFlags, string> = {
  sleepDisruption: "sono desregulado",
  severeInsomnia: "ins√¥nia intensa",
  appetiteLoss: "apetite reduzido",
  emotionalEating: "compensa√ß√£o na comida",
  frequentSocialChecks: "checagem frequente das redes",
  compulsiveSocialChecks: "checagem compulsiva das redes",
  impulseToContact: "impulsos de contato",
  romanticizingPast: "idealiza√ß√£o do passado",
  intenseAnger: "raiva recorrente",
  heavyGuilt: "culpa persistente",
  futureFeelsImpossible: "dificuldade de imaginar futuro sem a pessoa",
  lowEnergy: "energia baixa/paralisa√ß√£o",
  closedToNewConnections: "resist√™ncia a novas conex√µes",
};

function buildFlagSummary(flags: SymptomFlags): string[] {
  return (Object.entries(FLAG_LABELS) as Array<[keyof SymptomFlags, string]>)
    .filter(([key]) => flags[key])
    .map(([, label]) => label);
}

// ===================== Handler =====================

export async function POST(request: NextRequest) {
  try {
    safeLog("üì• API /generate-report chamada");
    const body: GenerateReportRequest = await request.json();
    const {
      segment,
      answers,
      detailedAnswers,
      scores,
      birthdate,
      exBirthdate,
    } = body;
    safeLog(`üìä Gerando relat√≥rio de entendimento - Segmento: ${segment}`);

    if (!segment || !answers) {
      return NextResponse.json(
        { error: "Segmento e respostas s√£o obrigat√≥rios" },
        { status: 400 }
      );
    }

    if (!process.env.OPENAI_API_KEY) {
      console.error("OPENAI_API_KEY n√£o configurada");
      return NextResponse.json(
        { error: "Servi√ßo temporariamente indispon√≠vel" },
        { status: 500 }
      );
    }

    const userBirthdate =
      birthdate || (answers.birthdate as string) || undefined;
    const userExBirthdate =
      exBirthdate || (answers.exBirthdate as string) || undefined;

    const daysSinceBreakup = deriveDaysSinceBreakup(answers);
    const symptomFlags = deriveSymptomFlags(answers);

    const userBehaviorTraits: string[] = [];
    const exBehaviorTraits: string[] = [];
    const compatibilityHighlights: string[] = [];

    const userZodiac = userBirthdate ? getZodiacSign(userBirthdate) : null;
    const exZodiac = userExBirthdate ? getZodiacSign(userExBirthdate) : null;

    if (userZodiac) {
      userBehaviorTraits.push(
        ...insightToTraits(getZodiacInsights(userZodiac))
      );
    }

    if (exZodiac) {
      exBehaviorTraits.push(...insightToTraits(getZodiacInsights(exZodiac)));
    }

    if (userZodiac && exZodiac) {
      compatibilityHighlights.push(
        ...insightToTraits(getCompatibilityInsights(userZodiac, exZodiac))
      );
    }

    const answersContext = detailedAnswers
      ? detailedAnswers
          .map(
            (item) =>
              `Pergunta: ${item.question}\nResposta: ${item.emoji} ${item.answerLabel}\nPeso: ${item.weight} pts ‚Üí ${item.segment}\n`
          )
          .join("\n")
      : QUESTIONS.map((question) => {
          const answer = answers[question.id];
          const answerValue = Array.isArray(answer) ? answer[0] : answer;
          const selectedOption = question.options.find(
            (opt) => opt.value === answerValue
          );
          return `Pergunta: ${question.title}\nResposta: ${
            selectedOption?.label || "N√£o respondida"
          }\n`;
        }).join("\n");

    const segmentContent = getSegmentContent(segment);
    const userFirstName = deriveFirstName(answers);
    const userGender = deriveGender(answers);
    const pronouns = getPronounSet(userGender);

    safeLog(
      `üë§ Nome: ${userFirstName}, G√™nero: ${userGender || "n√£o informado"}`
    );

    const userTraitsBlock = userBehaviorTraits.length
      ? userBehaviorTraits.map((trait) => `- ${trait}`).join("\n")
      : "- Tra√ßos derivados n√£o dispon√≠veis; use apenas as respostas para inferir.";

    const exTraitsBlock = exBehaviorTraits.length
      ? exBehaviorTraits.map((trait) => `- ${trait}`).join("\n")
      : "- Dados insuficientes para derivar tra√ßos (se n√£o houver, ignore).";

    const compatibilityBlock = compatibilityHighlights.length
      ? compatibilityHighlights.map((trait) => `- ${trait}`).join("\n")
      : "- Sem dados suficientes; omita a se√ß√£o de compatibility se continuar sem base.";

    const shouldIncludeCompatibility = compatibilityHighlights.length > 0;
    const flagSummaryList = buildFlagSummary(symptomFlags);
    const flagsHumanReadable = flagSummaryList.length
      ? flagSummaryList.join(", ")
      : "sem sintomas de alta intensidade detectados";
    const flagsForPrompt = JSON.stringify(symptomFlags, null, 2);

    // ===== Schema de ENTENDIMENTO (free) =====
    const understandingSchema = `
SA√çDA OBRIGAT√ìRIA: JSON V√ÅLIDO (UTF-8), SEM markdown.

‚ö†Ô∏è IMPORTANTE:
- Os textos narrativos NUNCA podem citar "quiz", "perguntas", "respostas", "formul√°rio" ou "pesquisa".
- Ao referenciar evid√™ncias no texto, use formas neutras: "pelos seus sinais", "pelo que voc√™ contou", "pelas suas rea√ß√µes".
- As evid√™ncias t√©cnicas ficam APENAS nos campos *_evidences (para uso interno).

{
  "header": {
    "title": "O que realmente est√° acontecendo com voc√™",
    "subtitle": "Leitura clara do que voc√™ sente e por que isso acontece",
    "segment": "Nome da etapa REAL identificada (ex.: Devasta√ß√£o, Abstin√™ncia emocional, Interioriza√ß√£o, Ira, Aceita√ß√£o fr√°gil, Reconstru√ß√£o)"
  },

  "intro": "Par√°grafo curto e personalizado para {{userFirstName}}, adaptado ao segmento, com tom emp√°tico e direto. Ex.: 'Voc√™, {{userFirstName}}, est√° tentando seguir, mas seu corpo n√£o acompanha. Este relat√≥rio vai doer um pouco, mas ele explica ‚Äî de forma simples ‚Äî por que isso ainda prende voc√™.'",

  "one_liner": "Resumo em 1 frase, direta, sobre o momento atual de {{userFirstName}}.",

  "stage_confidence": 0.85,

  "stage_signals": [
    { "signal": "Ex.: 'Acorda durante a noite'", "evidence": [{ "questionId": "sono", "answerLabel": "Acordo v√°rias vezes" }] },
    { "signal": "Ex.: 'Dificuldade real de imaginar futuro sem a pessoa'", "evidence": [{ "questionId": "futuro", "answerLabel": "N√£o consigo imaginar" }] }
  ],

  "personProfile": [
    "Escreva 2-3 par√°grafos cir√∫rgicos, usando o nome {{userFirstName}}. Explique como {{userFirstName}} sente, pensa e se protege emocionalmente. Traga exemplos concretos (sono, apetite, checagens, energia), sem mencionar 'quiz'. Seja direto, humano e espec√≠fico. Evite poesia."
  ],
  "personProfile_evidences": [
    { "questionId": "sono", "answerLabel": "Dificuldade para dormir" },
    { "questionId": "apetite", "answerLabel": "Sem apetite" }
  ],

  "relationshipOverview": [
    "Explique, em 2-3 par√°grafos, por que a conex√£o aconteceu, onde come√ßou a se perder e o que ficou em aberto. Mostre a cola emocional (rotina, promessas, sensa√ß√£o de 'quase deu certo'). Linguagem simples."
  ],
  "relationshipOverview_evidences": [
    { "questionId": "idealizacao", "answerLabel": "Costuma idealizar" },
    { "questionId": "tempo_fim", "answerLabel": "31-90 dias" }
  ],

  "currentFeelings": {
    "mind": [
      "Explique os loops da mente de {{userFirstName}} de forma direta (ex.: revisa conversas, procura sinais, cria cen√°rios). Zero misticismo."
    ],
    "body": [
      "Mostre como o corpo reage (sono/apetite/energia/tens√£o) e por que isso √© normal nesta etapa. Linguagem simples."
    ],
    "heart": [
      "Explique o que o cora√ß√£o sente (saudade, medo, compara√ß√£o, injusti√ßa) e como isso se mistura. Direto, concreto."
    ]
  },
  "currentFeelings_evidences": [
    { "questionId": "sono", "answerLabel": "Ins√¥nia" },
    { "questionId": "raiva", "answerLabel": "Moderada" }
  ],

  "whyCantMoveOn": [
    "Mostre, em 2-3 par√°grafos, o que mant√©m o v√≠nculo ativo: mem√≥ria boa, rotina quebrada, necessidade de sentido, medo de soltar, compara√ß√£o. Conecte com tempo desde o fim. Nada de conselhos."
  ],
  "whyCantMoveOn_evidences": [
    { "questionId": "checagens", "answerLabel": "3-5 vezes/dia" },
    { "questionId": "impulso_contato", "answerLabel": "Frequente" }
  ],

  "currentStage": {
    "name": "Etapa REAL identificada (DEVE SER IGUAL a header.segment)",
    "description": [
      "Explique, em 2-3 par√°grafos, sinais concretos desta etapa, por que {{userFirstName}} est√° nela e o que a sustenta. Use linguagem simples e direta."
    ]
  },
  "currentStage_evidences": [
    { "questionId": "futuro", "answerLabel": "Dif√≠cil me imaginar feliz" },
    { "questionId": "atividades", "answerLabel": "For√ßando rotina" }
  ],

  "rootCause": [
    "Explique, em 2-3 par√°grafos, o padr√£o central (ex.: controle, valida√ß√£o, medo de abandono, idealiza√ß√£o) e como ele aparece aqui. Zero julgamento, s√≥ clareza."
  ],
  "rootCause_evidences": [
    { "questionId": "culpa", "answerLabel": "Frequente" },
    { "questionId": "idealizacao", "answerLabel": "Bastante" }
  ],

  "unresolvedPoints": [
    "Liste 3-5 frases curtas e diretas sobre o que AINDA puxa {{userFirstName}} para tr√°s. Ex.: 'Voc√™ ainda busca confirma√ß√£o do outro para se acalmar.'",
    "Frases de impacto, sem rodeios, sem tarefas."
  ],

  "learning": [
    "Explique, em 2-3 par√°grafos, o que essa hist√≥ria mostra sobre o padr√£o emocional de {{userFirstName}}. Nada de moral da hist√≥ria. Apenas clareza sobre o padr√£o."
  ],
  "learning_evidences": [
    { "questionId": "reflexao", "answerLabel": "J√° comecei a rever h√°bitos" },
    { "questionId": "novas_conexoes", "answerLabel": "Ainda n√£o" }
  ],

  "compatibility": {
    "connection": ["Se houver dados do ex, explique por que conectaram (tra√ßos semelhantes/complementares)."],
    "strengths": ["Pontos fortes da dupla."],
    "frictions": ["Fontes previs√≠veis de atrito."],
    "distancing": ["Por que se afastaram (din√¢micas que n√£o fechavam)."]
  },

  "nextStepHint": {
    "summary": "Resumo curto do que {{userFirstName}} j√° entendeu e do que AINDA est√° em aberto.",
    "why_full_report": "1 frase clara explicando por que o Relat√≥rio Completo √© importante neste caso (destrava pontos cegos espec√≠ficos)."
  },

  "closing_archetype": "Frase forte de 1 linha que sintetiza o momento de {{userFirstName}} sem soar po√©tica demais. Ex.: 'N√£o √© sobre voltar no tempo ‚Äî √© sobre recuperar o comando do que voc√™ sente agora.'"
}

REGRAS N√ÉO NEGOCI√ÅVEIS:
1) Use o nome {{userFirstName}} pelo menos 3 vezes ao longo do relat√≥rio.
2) No texto NUNCA mencione 'quiz', 'perguntas' ou 'respostas'. Prefira: 'pelos seus sinais', 'pelo que voc√™ contou', 'pelas suas rea√ß√µes'.
3) Nada de texto gen√©rico. Traga exemplos concretos (sono, apetite, checagens, compara√ß√µes, impulsos).
4) Zero poesia, zero autoajuda. Direto, humano, brasileiro.
5) 'header.segment' DEVE ser exatamente igual a 'currentStage.name'.
6) 'stage_confidence' entre 0 e 1.
7) Cada *_evidences deve ter ao menos 2 evid√™ncias reais (questionId + answerLabel).
8) Se n√£o houver dados do ex, omita 'compatibility' do JSON final.
`;

    const schemaForPrompt = understandingSchema.replace(
      /\{\{userFirstName\}\}/g,
      userFirstName
    );

    const systemPromptFree = `
Voc√™ √© um especialista em an√°lise emocional p√≥s-t√©rmino. Gere um relat√≥rio direto, humano e cir√∫rgico para ${userFirstName}.

üî§ G√äNERO E PRONOMES:
${
  userGender === "M"
    ? "O leitor √© MASCULINO."
    : "A leitora √© FEMININA (ou g√™nero n√£o informado)."
}
Use pronomes coerentes nos exemplos e na narra√ß√£o quando necess√°rio.
- Ex.: "${pronouns.dele_dela}" / "${pronouns.ele_ela}" / "${
      pronouns.preso_presa
    }" / artigo "${pronouns.o_a}".
- NUNCA use ‚Äúvoc√™ mesma‚Äù/‚Äúvoc√™ mesmo‚Äù. Prefira neutro: ‚Äúvoc√™ contou‚Äù, ‚Äúvoc√™ indicou‚Äù, ‚Äúseus sinais mostram‚Äù.

TOM OBRIGAT√ìRIO:
- Direto, emp√°tico, provocativo quando √∫til.
- Zero misticismo, zero poesia, zero autoajuda.
- Compara√ß√µes simples s√£o bem-vindas (ex.: "parece m√∫sica repetindo na cabe√ßa").
- O objetivo √© a pessoa se reconhecer de primeira e pensar: ‚Äú√© isso‚Äù.

PROIBI√á√ïES NO TEXTO PARA O LEITOR:
- N√£o fale ‚Äúno quiz voc√™ respondeu‚Ä¶‚Äù, ‚Äúna pesquisa‚Ä¶‚Äù, ‚Äúno formul√°rio‚Ä¶‚Äù. 
- Se precisar referenciar, diga ‚Äúpelos seus sinais‚Äù, ‚Äúpelo que voc√™ contou‚Äù (sem citar o mecanismo).

SA√çDA OBRIGAT√ìRIA:
- JSON v√°lido seguindo o schema abaixo (SEM markdown).
- Inclua "intro", "one_liner", "closing_archetype".
- 'header.segment' === 'currentStage.name'.
- Preencha *_evidences com questionId + answerLabel (uso interno). N√£o exponha isso no texto narrativo.
- 'stage_confidence' entre 0 e 1. 'stage_signals' com 2-4 itens com evid√™ncias.

CONTEXTO DO CASO:
- Segmento: ${segmentContent.headline}
- Descri√ß√£o: ${segmentContent.description}
- Per√≠odo desde o t√©rmino: ${daysSinceBreakup ?? "n√£o informado"} dias
- Sintomas principais: ${flagsHumanReadable}
- Tra√ßos do usu√°rio (derivados, se houver): 
${userTraitsBlock}
- Tra√ßos do ex (se houver): 
${exTraitsBlock}
- Compatibilidade (se houver base): 
${compatibilityBlock}

${schemaForPrompt}
`;

    const systemPrompt = systemPromptFree;

    const userPrompt = `
LEITOR: ${userFirstName}
G√äNERO: ${
      userGender === "M"
        ? "Masculino"
        : userGender === "F"
        ? "Feminino"
        : "N√£o informado"
    }
PRONOMES: ${pronouns.dele_dela} / ${pronouns.ele_ela} / ${
      pronouns.preso_presa
    } / ${pronouns.o_a}

SEGMENTO IDENTIFICADO: ${segmentContent.headline}
DESCRI√á√ÉO DO SEGMENTO: ${segmentContent.description}

DIAS DESDE O T√âRMINO (aprox.): ${daysSinceBreakup ?? "n√£o informado"}

SINTOMAS / BANDEIRAS DETECTADOS (resumo humano):
${flagsHumanReadable}
Mapa bruto das flags:
${flagsForPrompt}

SCORES DO QUIZ:
- Devasta√ß√£o: ${scores.devastacao}
- Abstin√™ncia: ${scores.abstinencia}
- Interioriza√ß√£o: ${scores.interiorizacao}
- Ira: ${scores.ira}
- Supera√ß√£o: ${scores.superacao}

TRA√áOS DO USU√ÅRIO (derivados de contexto ‚Äî n√£o citar signos no texto):
${userTraitsBlock}

TRA√áOS DO EX (se houver dados ‚Äî n√£o citar signos no texto):
${exTraitsBlock}

DIN√ÇMICA ENTRE VOC√äS (se houver base ‚Äî texto n√£o deve citar ‚Äúquiz‚Äù):
${compatibilityBlock}

RESPOSTAS DETALHADAS (para embasar *_evidences; N√ÉO citar no texto narrativo):
${answersContext}

RESTRI√á√ïES CR√çTICAS:
- Gere apenas o JSON no formato exigido (SEM markdown).
- "header.segment" DEVE ser EXATAMENTE IGUAL a "currentStage.name".
- Use o nome ${userFirstName} pelo menos 3 vezes no texto.
- N√£o use ‚Äúvoc√™ mesma/voc√™ mesmo‚Äù; prefira ‚Äúvoc√™‚Äù neutro.
- Se n√£o houver base para "compatibility", omita essa se√ß√£o do JSON final.
`;

    // ===== Chamada OpenAI =====
    safeLog("ü§ñ Chamando OpenAI...");
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt },
      ],
      temperature: 0.5,
      max_tokens: 3800,
      response_format: { type: "json_object" },
    });

    const content = completion.choices[0]?.message?.content;
    if (!content) throw new Error("Nenhum relat√≥rio foi gerado pela OpenAI");

    // ===== Parse e valida√ß√£o =====
    let report: ReportFreePayload;

    try {
      report = JSON.parse(content) as ReportFreePayload;

      if (
        !report?.header ||
        !report?.intro ||
        !report?.one_liner ||
        typeof report?.stage_confidence !== "number" ||
        !Array.isArray(report?.stage_signals) ||
        !Array.isArray(report?.personProfile) ||
        !Array.isArray(report?.personProfile_evidences) ||
        !Array.isArray(report?.relationshipOverview) ||
        !Array.isArray(report?.relationshipOverview_evidences) ||
        !report?.currentFeelings ||
        !Array.isArray(report?.currentFeelings_evidences) ||
        !report?.currentStage ||
        !Array.isArray(report?.currentStage_evidences) ||
        !Array.isArray(report?.whyCantMoveOn) ||
        !Array.isArray(report?.whyCantMoveOn_evidences) ||
        !Array.isArray(report?.rootCause) ||
        !Array.isArray(report?.rootCause_evidences) ||
        !Array.isArray(report?.unresolvedPoints) ||
        !Array.isArray(report?.learning) ||
        !Array.isArray(report?.learning_evidences) ||
        !report?.nextStepHint ||
        typeof report.nextStepHint.summary !== "string" ||
        typeof report.nextStepHint.why_full_report !== "string" ||
        !report?.closing_archetype ||
        typeof report.closing_archetype !== "string"
      ) {
        safeLog("‚ùå JSON inv√°lido (faltam campos):", Object.keys(report || {}));
        throw new Error("Estrutura do relat√≥rio inv√°lida");
      }

      if (report.header.segment !== report.currentStage.name) {
        safeLog(
          `‚ö†Ô∏è Inconsist√™ncia: header.segment (${report.header.segment}) !== currentStage.name (${report.currentStage.name}) ‚Äî ajustando.`
        );
        report.currentStage.name = report.header.segment;
      }

      if (report.stage_confidence < 0 || report.stage_confidence > 1) {
        safeLog(
          `‚ö†Ô∏è stage_confidence fora do range (${report.stage_confidence}), ajustando para 0.75`
        );
        report.stage_confidence = 0.75;
      }
    } catch (err) {
      safeLog("‚ùå Erro ao parsear JSON:", err);
      safeLog(
        "üìÑ Conte√∫do recebido (500 chars):",
        content.substring(0, 500) + "..."
      );
      throw new Error("Erro ao processar relat√≥rio (parse JSON)");
    }

    return NextResponse.json({
      success: true,
      report,
      segment,
      days_since_breakup: daysSinceBreakup ?? null,
      generatedAt: new Date().toISOString(),
    });
  } catch (error: any) {
    console.error("‚ùå ERRO GERAL ao gerar relat√≥rio:", error);

    if (error instanceof OpenAI.APIError) {
      return NextResponse.json(
        {
          error: "Erro ao processar solicita√ß√£o",
          details: (error as any).message,
        },
        { status: (error as any).status || 500 }
      );
    }

    const msg = (error as Error)?.message || "Erro ao gerar relat√≥rio";
    return NextResponse.json({ error: msg }, { status: 500 });
  }
}
