/**
 * @file: app/api/generate-report/route.ts
 * @responsibility: API route para gerar relat√≥rio personalizado com OpenAI
 * @exports: POST handler
 */

import { NextRequest, NextResponse } from "next/server";
import OpenAI from "openai";
import { QUESTIONS, type Segment } from "@/lib/questions";
import { getSegmentContent } from "@/lib/segments";
import {
  getZodiacSign,
  getZodiacInsights,
  getCompatibilityInsights,
} from "@/lib/astrology";
import { ReportFreePayload } from "@/types/report-free";
import {
  sanitizeQuizAnswers,
  validateQuizAnswers,
  hasSQLInjection,
  hasXSS,
  SECURITY_HEADERS,
} from "@/lib/security";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

interface DetailedAnswer {
  questionId: string;
  question: string;
  answer: string | string[];
  answerLabel: string;
  weight: number;
  segment: string;
  emoji: string;
}

interface GenerateReportRequest {
  segment: Segment;
  answers: Record<string, string | string[]>;
  detailedAnswers?: DetailedAnswer[];
  scores: Record<Segment, number>;
  birthdate?: string;
  exBirthdate?: string;
}

// ===================== Helpers =====================

function safeLog(...args: any[]) {}

const TEMPO_FIM_TO_DAYS: Record<string, number> = {
  "0-7": 5,
  "8-30": 20,
  "31-90": 60,
  "90+": 120,
};

type SymptomFlags = {
  sleepDisruption: boolean;
  severeInsomnia: boolean;
  appetiteLoss: boolean;
  emotionalEating: boolean;
  frequentSocialChecks: boolean;
  compulsiveSocialChecks: boolean;
  impulseToContact: boolean;
  romanticizingPast: boolean;
  intenseAnger: boolean;
  heavyGuilt: boolean;
  futureFeelsImpossible: boolean;
  lowEnergy: boolean;
  closedToNewConnections: boolean;
};

const DEFAULT_FLAGS: SymptomFlags = {
  sleepDisruption: false,
  severeInsomnia: false,
  appetiteLoss: false,
  emotionalEating: false,
  frequentSocialChecks: false,
  compulsiveSocialChecks: false,
  impulseToContact: false,
  romanticizingPast: false,
  intenseAnger: false,
  heavyGuilt: false,
  futureFeelsImpossible: false,
  lowEnergy: false,
  closedToNewConnections: false,
};

function deriveDaysSinceBreakup(
  answers: Record<string, string | string[]>
): number | null {
  const raw = answers["tempo_fim"];
  if (!raw || Array.isArray(raw)) {
    return null;
  }
  return TEMPO_FIM_TO_DAYS[raw] ?? null;
}

function deriveSymptomFlags(
  answers: Record<string, string | string[]>
): SymptomFlags {
  const flags: SymptomFlags = { ...DEFAULT_FLAGS };

  const sleep = answers["sono"];
  if (typeof sleep === "string") {
    if (["dificuldade", "acordo", "insonia"].includes(sleep)) {
      flags.sleepDisruption = true;
    }
    if (sleep === "insonia") {
      flags.severeInsomnia = true;
    }
  }

  const appetite = answers["apetite"];
  if (typeof appetite === "string") {
    if (["diminuiu", "sem_apetite"].includes(appetite)) {
      flags.appetiteLoss = true;
    }
    if (appetite === "aumentou") {
      flags.emotionalEating = true;
    }
  }

  const checks = answers["checagens"];
  if (typeof checks === "string") {
    if (["1-2", "3-5", "6+"].includes(checks)) {
      flags.frequentSocialChecks = true;
    }
    if (["3-5", "6+"].includes(checks)) {
      flags.compulsiveSocialChecks = true;
    }
  }

  const impulse = answers["impulso_contato"];
  if (typeof impulse === "string") {
    if (["frequente", "constante"].includes(impulse)) {
      flags.impulseToContact = true;
    }
  }

  const idealization = answers["idealizacao"];
  if (typeof idealization === "string") {
    if (["bastante", "totalmente"].includes(idealization)) {
      flags.romanticizingPast = true;
    }
  }

  const anger = answers["raiva"];
  if (typeof anger === "string") {
    if (["moderada", "intensa"].includes(anger)) {
      flags.intenseAnger = true;
    }
  }

  const guilt = answers["culpa"];
  if (typeof guilt === "string") {
    if (["frequente", "totalmente"].includes(guilt)) {
      flags.heavyGuilt = true;
    }
  }

  const future = answers["futuro"];
  if (typeof future === "string") {
    if (["nao", "dificil"].includes(future)) {
      flags.futureFeelsImpossible = true;
    }
  }

  const activities = answers["atividades"];
  if (typeof activities === "string") {
    if (["nao", "forcando"].includes(activities)) {
      flags.lowEnergy = true;
    }
  }

  const newConnections = answers["novas_conexoes"];
  if (typeof newConnections === "string") {
    if (["nao", "ainda_nao"].includes(newConnections)) {
      flags.closedToNewConnections = true;
    }
  }

  return flags;
}

function insightToTraits(insight?: string | null): string[] {
  if (!insight) return [];
  return insight
    .split(/[.;]\s+/)
    .map((piece) => piece.replace(/\.$/, "").trim())
    .filter((piece) => piece.length > 0);
}

const NAME_KEYS = ["name", "nome", "firstName", "leadName"];

function deriveFirstName(answers: Record<string, string | string[]>): string {
  for (const key of NAME_KEYS) {
    const value = answers[key];
    if (typeof value === "string") {
      const cleaned = value.trim();
      if (cleaned) {
        const firstToken = cleaned.split(/\s+/)[0];
        return firstToken.charAt(0).toUpperCase() + firstToken.slice(1);
      }
    }
  }
  return "Voc√™";
}

function deriveGender(
  answers: Record<string, string | string[]>
): "M" | "F" | null {
  const gender = answers["gender"];
  if (typeof gender === "string") {
    const normalized = gender.trim().toUpperCase();
    if (normalized === "M" || normalized === "MASCULINO") return "M";
    if (normalized === "F" || normalized === "FEMININO") return "F";
  }
  return null;
}

function getPronounSet(gender: "M" | "F" | null): {
  dele_dela: string;
  ele_ela: string;
  o_a: string;
  preso_presa: string;
  mesmo_mesma: string;
} {
  if (gender === "M") {
    return {
      dele_dela: "dele",
      ele_ela: "ele",
      o_a: "o",
      preso_presa: "preso",
      mesmo_mesma: "mesmo",
    };
  }
  return {
    dele_dela: "dela",
    ele_ela: "ela",
    o_a: "a",
    preso_presa: "presa",
    mesmo_mesma: "mesma",
  };
}

const FLAG_LABELS: Record<keyof SymptomFlags, string> = {
  sleepDisruption: "sono desregulado",
  severeInsomnia: "ins√¥nia intensa",
  appetiteLoss: "apetite reduzido",
  emotionalEating: "compensa√ß√£o na comida",
  frequentSocialChecks: "checagem frequente das redes",
  compulsiveSocialChecks: "checagem compulsiva das redes",
  impulseToContact: "impulsos de contato",
  romanticizingPast: "idealiza√ß√£o do passado",
  intenseAnger: "raiva recorrente",
  heavyGuilt: "culpa persistente",
  futureFeelsImpossible: "dificuldade de imaginar futuro sem a pessoa",
  lowEnergy: "energia baixa/paralisa√ß√£o",
  closedToNewConnections: "resist√™ncia a novas conex√µes",
};

function buildFlagSummary(flags: SymptomFlags): string[] {
  return (Object.entries(FLAG_LABELS) as Array<[keyof SymptomFlags, string]>)
    .filter(([key]) => flags[key])
    .map(([, label]) => label);
}

// ===================== Handler =====================

export async function POST(request: NextRequest) {
  try {
    safeLog("üì• API /generate-report chamada");
    const body: GenerateReportRequest = await request.json();
    const {
      segment,
      answers,
      detailedAnswers,
      scores,
      birthdate,
      exBirthdate,
    } = body;
    safeLog(`üìä Gerando relat√≥rio de entendimento - Segmento: ${segment}`);

    // Security validation
    if (!segment || !answers) {
      return NextResponse.json(
        { error: "Segmento e respostas s√£o obrigat√≥rios" },
        { status: 400, headers: SECURITY_HEADERS }
      );
    }

    // Validate and sanitize inputs
    if (!validateQuizAnswers(answers)) {
      return NextResponse.json(
        { error: "Dados inv√°lidos detectados" },
        { status: 400, headers: SECURITY_HEADERS }
      );
    }

    // Check for malicious patterns
    const answersString = JSON.stringify(answers);
    if (hasSQLInjection(answersString) || hasXSS(answersString)) {
      return NextResponse.json(
        { error: "Padr√µes suspeitos detectados" },
        { status: 400, headers: SECURITY_HEADERS }
      );
    }

    // Sanitize answers
    const sanitizedAnswers = sanitizeQuizAnswers(answers);

    if (!process.env.OPENAI_API_KEY) {
      console.error("OPENAI_API_KEY n√£o configurada");
      return NextResponse.json(
        { error: "Servi√ßo temporariamente indispon√≠vel" },
        { status: 500 }
      );
    }

    const userBirthdate =
      birthdate || (sanitizedAnswers.birthdate as string) || undefined;
    const userExBirthdate =
      exBirthdate || (sanitizedAnswers.exBirthdate as string) || undefined;

    const daysSinceBreakup = deriveDaysSinceBreakup(sanitizedAnswers);
    const symptomFlags = deriveSymptomFlags(sanitizedAnswers);

    const userBehaviorTraits: string[] = [];
    const exBehaviorTraits: string[] = [];
    const compatibilityHighlights: string[] = [];

    const userZodiac = userBirthdate ? getZodiacSign(userBirthdate) : null;
    const exZodiac = userExBirthdate ? getZodiacSign(userExBirthdate) : null;

    if (userZodiac) {
      userBehaviorTraits.push(
        ...insightToTraits(getZodiacInsights(userZodiac))
      );
    }

    if (exZodiac) {
      exBehaviorTraits.push(...insightToTraits(getZodiacInsights(exZodiac)));
    }

    if (userZodiac && exZodiac) {
      compatibilityHighlights.push(
        ...insightToTraits(getCompatibilityInsights(userZodiac, exZodiac))
      );
    }

    const answersContext = detailedAnswers
      ? detailedAnswers
          .map(
            (item) =>
              `Pergunta: ${item.question}\nResposta: ${item.emoji} ${item.answerLabel}\nPeso: ${item.weight} pts ‚Üí ${item.segment}\n`
          )
          .join("\n")
      : QUESTIONS.map((question) => {
          const answer = answers[question.id];
          const answerValue = Array.isArray(answer) ? answer[0] : answer;
          const selectedOption = question.options.find(
            (opt) => opt.value === answerValue
          );
          return `Pergunta: ${question.title}\nResposta: ${
            selectedOption?.label || "N√£o respondida"
          }\n`;
        }).join("\n");

    const segmentContent = getSegmentContent(segment);
    const userFirstName = deriveFirstName(answers);
    const userGender = deriveGender(answers);
    const pronouns = getPronounSet(userGender);

    safeLog(
      `üë§ Nome: ${userFirstName}, G√™nero: ${userGender || "n√£o informado"}`
    );

    const userTraitsBlock = userBehaviorTraits.length
      ? userBehaviorTraits.map((trait) => `- ${trait}`).join("\n")
      : "- Tra√ßos derivados n√£o dispon√≠veis; use apenas as respostas para inferir.";

    const exTraitsBlock = exBehaviorTraits.length
      ? exBehaviorTraits.map((trait) => `- ${trait}`).join("\n")
      : "- Dados insuficientes para derivar tra√ßos (se n√£o houver, ignore).";

    const compatibilityBlock = compatibilityHighlights.length
      ? compatibilityHighlights.map((trait) => `- ${trait}`).join("\n")
      : "- Sem dados suficientes; omita a se√ß√£o de compatibility se continuar sem base.";

    const shouldIncludeCompatibility = compatibilityHighlights.length > 0;
    const flagSummaryList = buildFlagSummary(symptomFlags);
    const flagsHumanReadable = flagSummaryList.length
      ? flagSummaryList.join(", ")
      : "sem sinais de alta intensidade detectados";
    const flagsForPrompt = JSON.stringify(symptomFlags, null, 2);

    // ===== Schema de ENTENDIMENTO (free) =====
    const understandingSchema = `
SA√çDA OBRIGAT√ìRIA: JSON V√ÅLIDO (UTF-8), SEM markdown.

‚ö†Ô∏è IMPORTANTE:
- Os textos narrativos NUNCA podem citar "quiz", "perguntas", "respostas", "formul√°rio" ou "pesquisa".
- Ao referenciar evid√™ncias no texto, use formas neutras: "pelos seus sinais", "pelo que voc√™ contou", "pelas suas rea√ß√µes".
- As evid√™ncias t√©cnicas ficam APENAS nos campos *_evidences (para uso interno).

{
  "header": {
    "title": "O que realmente est√° acontecendo com voc√™",
    "subtitle": "Leitura clara do que voc√™ sente e por que isso acontece",
    "segment": "Nome da etapa REAL identificada (ex.: Devasta√ß√£o, Abstin√™ncia emocional, Interioriza√ß√£o, Ira, Aceita√ß√£o fr√°gil, Reconstru√ß√£o)"
  },

  "intro": "Par√°grafo curto e personalizado USANDO O NOME REAL DO LEITOR de forma natural, adaptado ao segmento, com tom emp√°tico e direto. Insira o nome onde soar mais natural (pode ser no in√≠cio, meio ou final). Ex.: 'Voc√™ est√° tentando seguir, Maria, mas seu corpo n√£o acompanha.' ou 'Maria, este relat√≥rio vai doer um pouco, mas ele explica por que isso ainda prende voc√™.'",

  "one_liner": "Resumo em 1 frase, direta, sobre o momento atual DO LEITOR (use o nome real).",

  "stage_confidence": 0.85,

  "stage_signals": [
    { "signal": "Ex.: 'Acorda durante a noite'", "evidence": [{ "questionId": "sono", "answerLabel": "Acordo v√°rias vezes" }] },
    { "signal": "Ex.: 'Dificuldade real de imaginar futuro sem a pessoa'", "evidence": [{ "questionId": "futuro", "answerLabel": "N√£o consigo imaginar" }] }
  ],

  "personProfile": [
    "Escreva 3-4 par√°grafos PROFUNDOS E CIR√öRGICOS sobre quem a pessoa √â agora. Use o NOME REAL de forma natural (2-3 vezes). Fale sobre:
    - Como ela SENTE (emo√ß√µes dominantes, o que est√° por baixo da superf√≠cie)
    - Como ela PENSA (padr√µes de pensamento, narrativas internas, loops mentais)
    - Como ela SE PROTEGE emocionalmente (mecanismos de defesa, comportamentos de evita√ß√£o ou controle)
    - Como isso aparece no CORPO e no COMPORTAMENTO (sono, apetite, energia, checagens, isolamento)
    
    Seja ESPEC√çFICO. Traga exemplos concretos das respostas. Conecte os pontos entre corpo, mente e emo√ß√£o. Zero poesia, m√°xima precis√£o. A pessoa precisa se reconhecer completamente."
  ],
  "personProfile_evidences": [
    { "questionId": "sono", "answerLabel": "Dificuldade para dormir" },
    { "questionId": "apetite", "answerLabel": "Sem apetite" }
  ],

  "relationshipOverview": [
    "Escreva 3-4 par√°grafos DETALHADOS sobre a hist√≥ria do relacionamento:
    - POR QUE a conex√£o aconteceu (o que atraiu, que necessidades cada um supria no outro)
    - ONDE come√ßou a se perder (quando as din√¢micas mudaram, que sinais apareceram)
    - O QUE ficou em aberto (promessas n√£o cumpridas, conversas n√£o tidas, potencial n√£o realizado)
    - A COLA EMOCIONAL que ainda prende (rotina compartilhada, mem√≥rias espec√≠ficas, sensa√ß√£o de 'quase deu certo')
    
    Seja concreto. Use detalhes das respostas. A pessoa precisa entender a TRAJET√ìRIA, n√£o s√≥ o momento atual."
  ],
  "relationshipOverview_evidences": [
    { "questionId": "idealizacao", "answerLabel": "Costuma idealizar" },
    { "questionId": "tempo_fim", "answerLabel": "31-90 dias" }
  ],

  "currentFeelings": {
    "mind": [
      "2-3 par√°grafos sobre OS LOOPS MENTAIS espec√≠ficos. Use o nome real 1 vez. Explique:
      - Que tipo de pensamentos se repetem (reconstr√≥i conversas, procura sinais, cria cen√°rios 'e se')
      - QUANDO isso piora (noite, ao acordar, em momentos de sil√™ncio)
      - O que a mente BUSCA nesses loops (confirma√ß√£o, sentido, controle, al√≠vio)
      
      Seja cir√∫rgico. A pessoa precisa reconhecer os padr√µes exatos da pr√≥pria cabe√ßa."
    ],
    "body": [
      "2 par√°grafos sobre COMO O CORPO EST√Å REAGINDO. Seja espec√≠fico:
      - Sono (como est√° dormindo, quando acorda, qualidade do descanso)
      - Apetite e energia (se est√° comendo, que tipo de cansa√ßo sente)
      - Tens√£o f√≠sica (onde acumula, como se manifesta)
      - POR QUE isso √© uma resposta normal do sistema nervoso nesta fase
      
      Valide a experi√™ncia f√≠sica, n√£o minimize."
    ],
    "heart": [
      "2-3 par√°grafos sobre A MISTURA EMOCIONAL. Seja preciso:
      - Que emo√ß√µes COEXISTEM (saudade + raiva, al√≠vio + culpa, esperan√ßa + medo)
      - Como isso CONFUNDE (sentir duas coisas opostas ao mesmo tempo)
      - Qual emo√ß√£o DOMINA em diferentes momentos
      - Como a pessoa est√° LIDANDO com essa confus√£o
      
      N√£o simplifique. Mostre a complexidade real."
    ]
  },
  "currentFeelings_evidences": [
    { "questionId": "sono", "answerLabel": "Ins√¥nia" },
    { "questionId": "raiva", "answerLabel": "Moderada" }
  ],

  "whyCantMoveOn": [
    "Escreva 3-4 par√°grafos PROFUNDOS sobre O QUE MANT√âM O V√çNCULO ATIVO. Explique:
    - MEM√ìRIAS espec√≠ficas que ainda puxam (n√£o gen√©rico, mas momentos concretos que ficaram marcados)
    - ROTINA quebrada (que vazio isso deixou, que parte do dia ficou sem sentido)
    - NECESSIDADE DE SENTIDO (por que a pessoa precisa entender o que aconteceu antes de soltar)
    - MEDO DE SOLTAR (o que vai embora se ela aceitar que acabou - identidade, esperan√ßa, parte de si)
    - COMPARA√á√ÉO (com o avan√ßo do outro, com vers√µes anteriores de si mesma)
    
    Conecte com o TEMPO desde o t√©rmino. Mostre por que, neste momento espec√≠fico, ainda est√° dif√≠cil. Zero conselhos, m√°xima clareza sobre OS MECANISMOS."
  ],
  "whyCantMoveOn_evidences": [
    { "questionId": "checagens", "answerLabel": "3-5 vezes/dia" },
    { "questionId": "impulso_contato", "answerLabel": "Frequente" }
  ],

  "currentStage": {
    "name": "Etapa REAL identificada (DEVE SER IGUAL a header.segment)",
    "description": [
      "Explique, em 2-3 par√°grafos, sinais concretos desta etapa, por que A PESSOA est√° nela e o que a sustenta. Use o nome real de forma natural (no meio ou final das frases). Use linguagem simples e direta. USE O NOME 1 VEZ de forma org√¢nica."
    ]
  },
  "currentStage_evidences": [
    { "questionId": "futuro", "answerLabel": "Dif√≠cil me imaginar feliz" },
    { "questionId": "atividades", "answerLabel": "For√ßando rotina" }
  ],

  "rootCause": [
    "Escreva 3-4 par√°grafos CIR√öRGICOS sobre O PADR√ÉO RAIZ que est√° operando. Identifique:
    - QUAL √© o padr√£o central (ex.: busca de valida√ß√£o externa, necessidade de controle, medo de abandono, idealiza√ß√£o, necessidade de ser 'a boa pessoa', dificuldade com imperfei√ß√£o)
    - COMO esse padr√£o apareceu NESTE relacionamento especificamente (exemplos concretos)
    - COMO esse padr√£o est√° aparecendo AGORA no p√≥s-t√©rmino (nas checagens, na culpa, na dificuldade de soltar)
    - DE ONDE provavelmente vem esse padr√£o (hist√≥rico relacional, necessidades n√£o atendidas, estrat√©gias aprendidas)
    
    Zero julgamento. M√°xima clareza. A pessoa precisa VER o padr√£o operando, n√£o s√≥ saber que ele existe."
  ],
  "rootCause_evidences": [
    { "questionId": "culpa", "answerLabel": "Frequente" },
    { "questionId": "idealizacao", "answerLabel": "Bastante" }
  ],

  "unresolvedPoints": [
    "Liste 3-5 frases curtas e diretas sobre o que AINDA puxa A PESSOA para tr√°s. Use o nome real de forma natural em 1-2 frases. Ex.: 'Voc√™ ainda busca confirma√ß√£o, [NOME], para se acalmar.' ou '[NOME], voc√™ ainda compara seu avan√ßo com o dele.'",
    "Frases de impacto, sem rodeios, sem tarefas."
  ],

  "learning": [
    "Explique, em 2-3 par√°grafos, o que essa hist√≥ria mostra sobre o padr√£o emocional DA PESSOA. Use o nome real de forma natural (1 vez). Nada de moral da hist√≥ria. Apenas clareza sobre o padr√£o."
  ],
  "learning_evidences": [
    { "questionId": "reflexao", "answerLabel": "J√° comecei a rever h√°bitos" },
    { "questionId": "novas_conexoes", "answerLabel": "Ainda n√£o" }
  ],

  "relationshipDynamics": {
    "whyConnected": [
      "Explique em 2-3 par√°grafos POR QUE voc√™s se conectaram no in√≠cio. Use insights sobre tra√ßos de personalidade, necessidades emocionais e formas de se relacionar (SEM mencionar signos ou astrologia). Fale sobre o que atraiu um ao outro, como as personalidades se complementavam, que tipo de conex√£o emocional surgiu. Seja espec√≠fico sobre as din√¢micas que funcionavam. Use o nome real 1 vez de forma natural."
    ],
    "whatWorked": [
      "Liste 3-5 pontos espec√≠ficos que FUNCIONARAM bem no relacionamento. Seja concreto: formas de comunica√ß√£o, rituais compartilhados, como lidavam com conflitos, aspectos da rotina que flu√≠am bem. Baseie-se nos tra√ßos de personalidade de ambos."
    ],
    "whatDidntWork": [
      "Explique em 2-3 par√°grafos O QUE N√ÉO FUNCIONOU. Identifique os pontos de atrito: diferen√ßas de ritmo emocional, formas de processar conflito, necessidades incompat√≠veis, padr√µes que geravam dist√¢ncia. Seja direto sobre as din√¢micas que criavam tens√£o. Use insights de personalidade SEM mencionar astrologia."
    ],
    "whatCouldHaveBeenBetter": [
      "Explique em 2 par√°grafos O QUE VOC√äS DOIS poderiam ter feito diferente. Fale sobre ajustes de comunica√ß√£o, necessidades que poderiam ter sido expressas melhor, limites que faltaram, espa√ßos que precisavam ser respeitados. Zero julgamento, apenas clareza sobre o que poderia ter mudado a din√¢mica."
    ],
    "howYouComplement": [
      "Explique em 1-2 par√°grafos COMO voc√™s se complementam naturalmente. Quais tra√ßos de um equilibram o outro? Onde a diferen√ßa √© for√ßa ao inv√©s de atrito? Use insights de personalidade de forma sutil."
    ],
    "howYouClash": [
      "Explique em 1-2 par√°grafos ONDE voc√™s se afastam naturalmente. Quais diferen√ßas fundamentais criam dist√¢ncia? Onde os ritmos emocionais n√£o batem? Onde as necessidades entram em conflito? Seja claro e direto."
    ]
  },
  "relationshipDynamics_evidences": [
    { "questionId": "comunicacao", "answerLabel": "F√°cil e natural" },
    { "questionId": "idealizacao", "answerLabel": "Costuma idealizar" }
  ],

  "nextStepHint": {
    "summary": "Resumo curto do que {{userFirstName}} j√° entendeu e do que AINDA est√° em aberto.",
    "why_full_report": "1 frase clara explicando por que o Relat√≥rio Completo √© importante neste caso (destrava pontos cegos espec√≠ficos)."
  },

  "closing_archetype": "Frase forte de 1 linha que sintetiza o momento de {{userFirstName}} sem soar po√©tica demais. Ex.: 'N√£o √© sobre voltar no tempo ‚Äî √© sobre recuperar o comando do que voc√™ sente agora.'"
}

REGRAS N√ÉO NEGOCI√ÅVEIS:
1) Use o nome {{userFirstName}} pelo menos 3 vezes ao longo do relat√≥rio.
2) No texto NUNCA mencione 'quiz', 'perguntas' ou 'respostas'. Prefira: 'pelos seus sinais', 'pelo que voc√™ contou', 'pelas suas rea√ß√µes'.
3) Nada de texto gen√©rico. Traga exemplos concretos (sono, apetite, checagens, compara√ß√µes, impulsos).
4) Zero poesia, zero autoajuda. Direto, humano, brasileiro.
5) 'header.segment' DEVE ser exatamente igual a 'currentStage.name'.
6) 'stage_confidence' entre 0 e 1.
7) Cada *_evidences deve ter ao menos 2 evid√™ncias reais (questionId + answerLabel).
8) ‚ö†Ô∏è SE√á√ÉO 'relationshipDynamics': S√ì inclua se houver dados do ex (tra√ßos de personalidade dispon√≠veis). Se n√£o houver, OMITA completamente do JSON.
9) ‚ö†Ô∏è Na se√ß√£o 'relationshipDynamics': Use os TRA√áOS DE PERSONALIDADE fornecidos para fundamentar a an√°lise, MAS NUNCA mencione "signo", "astrologia" ou termos relacionados. Seja sutil e fale como se fosse an√°lise de comportamento natural.
`;

    const schemaForPrompt = understandingSchema.replace(
      /\{\{userFirstName\}\}/g,
      userFirstName
    );

    const systemPromptFree = `
Voc√™ √© um especialista em an√°lise de padr√µes de comportamento p√≥s-t√©rmino. Gere um relat√≥rio direto, humano e cir√∫rgico para ${userFirstName}.

üî§ G√äNERO E PRONOMES:
${userGender === "M" ? "O leitor √© MASCULINO." : "A leitora √© FEMININA."}
Use pronomes coerentes nos exemplos e na narra√ß√£o quando necess√°rio.
- Ex.: "${pronouns.dele_dela}" / "${pronouns.ele_ela}" / "${
      pronouns.preso_presa
    }" / artigo "${pronouns.o_a}".
- NUNCA use ‚Äúvoc√™ mesma‚Äù/‚Äúvoc√™ mesmo‚Äù. Prefira neutro: ‚Äúvoc√™ contou‚Äù, ‚Äúvoc√™ indicou‚Äù, ‚Äúseus sinais mostram‚Äù.

TOM E PROFUNDIDADE OBRIGAT√ìRIOS:
- Direto, emp√°tico, provocativo quando √∫til.
- Zero misticismo, zero poesia, zero autoajuda.
- Compara√ß√µes simples s√£o bem-vindas (ex.: "parece m√∫sica repetindo na cabe√ßa").
- O objetivo √© a pessoa se reconhecer de primeira e pensar: "√© isso".
- ‚ö†Ô∏è PROFUNDIDADE: Este N√ÉO √© um relat√≥rio superficial. Cada se√ß√£o deve ser RICA, ESPEC√çFICA e CIR√öRGICA.
  * N√£o use frases gen√©ricas que poderiam servir para qualquer pessoa.
  * Use DETALHES das respostas para fundamentar cada afirma√ß√£o.
  * Conecte os pontos: como o que acontece no corpo reflete a mente, como o padr√£o aparece em diferentes √°reas.
  * A pessoa est√° PAGANDO por profundidade. Entregue an√°lise de verdade, n√£o texto de hor√≥scopo gen√©rico.

‚ö†Ô∏è REGRA DE OURO - USO DO NOME (NATURAL):
- Use o NOME REAL DO LEITOR ao longo do texto (5-7 vezes total), mas de forma NATURAL e VARIADA.
- VARIE a posi√ß√£o: in√≠cio, meio ou final das frases. N√ÉO use sempre o mesmo padr√£o.
- Exemplos naturais: 
  * "Voc√™ est√° tentando seguir, [NOME], mas seu corpo n√£o acompanha."
  * "[NOME], sua mente ainda revisa conversas..."
  * "Sua dificuldade para dormir mostra que, [NOME], voc√™ ainda..."
  * "Isso √© comum para voc√™ nesta fase, [NOME]."
- O objetivo √© soar humano e pessoal, n√£o robotizado.
- Distribua o nome ao longo das se√ß√µes, n√£o concentre tudo no in√≠cio.

PROIBI√á√ïES NO TEXTO PARA O LEITOR:
- N√£o fale "no quiz voc√™ respondeu‚Ä¶", "na pesquisa‚Ä¶", "no formul√°rio‚Ä¶". 
- Se precisar referenciar, diga "pelos seus sinais", "pelo que voc√™ contou" (sem citar o mecanismo).
- NUNCA mencione "signo", "astrologia", "mapa astral", "hor√≥scopo" ou termos relacionados.

‚ö†Ô∏è COMO USAR OS TRA√áOS DE PERSONALIDADE (na se√ß√£o relationshipDynamics):
- Voc√™ receber√° TRA√áOS DO USU√ÅRIO e TRA√áOS DO EX derivados de an√°lise comportamental.
- Use esses tra√ßos para fundamentar TODA a an√°lise de compatibilidade/din√¢mica do relacionamento.
- Fale sobre esses tra√ßos como se fossem caracter√≠sticas naturais de personalidade observadas.
- Exemplos de como traduzir:
  * "Voc√™ tende a processar emo√ß√µes de forma mais racional" ao inv√©s de "Voc√™ √© de signo de ar"
  * "Ele precisa de mais espa√ßo emocional para processar" ao inv√©s de "Ele √© de signo de √°gua"
  * "Voc√™s t√™m ritmos emocionais diferentes - voc√™ age r√°pido, ele reflete devagar"
  * "Voc√™ busca estabilidade enquanto ele valoriza novidade e mudan√ßa"
- Seja ESPEC√çFICO sobre como essas diferen√ßas aparecem no dia a dia do relacionamento.
- Use os INSIGHTS DE COMPATIBILIDADE fornecidos para explicar atritos, complementos e din√¢micas.

SA√çDA OBRIGAT√ìRIA:
- JSON v√°lido seguindo o schema abaixo (SEM markdown).
- Inclua "intro", "one_liner", "closing_archetype".
- 'header.segment' === 'currentStage.name'.
- Preencha *_evidences com questionId + answerLabel (uso interno). N√£o exponha isso no texto narrativo.
- 'stage_confidence' entre 0 e 1. 'stage_signals' com 2-4 itens com evid√™ncias.

CONTEXTO DO CASO:
- Segmento: ${segmentContent.headline}
- Descri√ß√£o: ${segmentContent.description}
- Per√≠odo desde o t√©rmino: ${daysSinceBreakup ?? "n√£o informado"} dias
- Sinais principais: ${flagsHumanReadable}
- Tra√ßos do usu√°rio (derivados, se houver): 
${userTraitsBlock}
- Tra√ßos do ex (se houver): 
${exTraitsBlock}
- Compatibilidade (se houver base): 
${compatibilityBlock}

${schemaForPrompt}
`;

    const systemPrompt = systemPromptFree;

    const userPrompt = `
LEITOR: ${userFirstName}
G√äNERO: ${userGender === "M" ? "Masculino" : "Feminino"}
PRONOMES: ${pronouns.dele_dela} / ${pronouns.ele_ela} / ${
      pronouns.preso_presa
    } / ${pronouns.o_a}

SEGMENTO IDENTIFICADO: ${segmentContent.headline}
DESCRI√á√ÉO DO SEGMENTO: ${segmentContent.description}

DIAS DESDE O T√âRMINO (aprox.): ${daysSinceBreakup ?? "n√£o informado"}

SINAIS / BANDEIRAS DETECTADOS (resumo humano):
${flagsHumanReadable}
Mapa bruto das flags:
${flagsForPrompt}

SCORES DO QUIZ:
- Devasta√ß√£o: ${scores.devastacao}
- Abstin√™ncia: ${scores.abstinencia}
- Interioriza√ß√£o: ${scores.interiorizacao}
- Ira: ${scores.ira}
- Supera√ß√£o: ${scores.superacao}

TRA√áOS DO USU√ÅRIO (derivados de contexto ‚Äî n√£o citar signos no texto):
${userTraitsBlock}

TRA√áOS DO EX (se houver dados ‚Äî n√£o citar signos no texto):
${exTraitsBlock}

DIN√ÇMICA ENTRE VOC√äS (insights de compatibilidade ‚Äî USE ESTES DADOS na se√ß√£o 'relationshipDynamics'):
${compatibilityBlock}

‚ö†Ô∏è INSTRU√á√ÉO CR√çTICA SOBRE 'relationshipDynamics':
${
  shouldIncludeCompatibility
    ? `‚úÖ INCLUA a se√ß√£o 'relationshipDynamics' completa no JSON.
- Use OS TRA√áOS acima para explicar a din√¢mica do relacionamento.
- Seja ESPEC√çFICO sobre como as personalidades se conectaram, se complementaram e entraram em atrito.
- Explique O QUE poderia ter sido feito diferente com base nessas din√¢micas.
- NUNCA mencione "signo" ou "astrologia" - fale como an√°lise de comportamento natural.`
    : `‚ùå N√ÉO INCLUA a se√ß√£o 'relationshipDynamics' no JSON final (dados insuficientes do ex).`
}

RESPOSTAS DETALHADAS (para embasar *_evidences; N√ÉO citar no texto narrativo):
${answersContext}

RESTRI√á√ïES CR√çTICAS:
- Gere apenas o JSON no formato exigido (SEM markdown).
- "header.segment" DEVE ser EXATAMENTE IGUAL a "currentStage.name".
- ‚ö†Ô∏è OBRIGAT√ìRIO: Use o nome "${userFirstName}" 5-7 VEZES ao longo do relat√≥rio, mas de forma NATURAL e VARIADA.
- ‚ö†Ô∏è VARIE AS FORMAS: n√£o repita sempre "Voc√™, ${userFirstName},". Use posi√ß√µes diferentes:
  * In√≠cio: "${userFirstName}, voc√™ est√° passando..."
  * Meio: "Voc√™ est√° tentando seguir, ${userFirstName}, mas..."
  * Final: "Sua mente ainda est√° agitada, ${userFirstName}."
  * Natural: "Isso √© comum para voc√™ nesta fase, ${userFirstName}."
- ‚ö†Ô∏è EXEMPLOS CORRETOS:
  * "Voc√™ est√° passando por um momento dif√≠cil, ${userFirstName}, e isso aparece no seu corpo."
  * "${userFirstName}, sua dificuldade para dormir mostra que..."
  * "Sua mente ainda procura sinais, ${userFirstName}, mesmo sem querer."
- N√£o use "voc√™ mesma/voc√™ mesmo"; prefira "voc√™" neutro.
- Se n√£o houver base para "compatibility", omita essa se√ß√£o do JSON final.
`;

    // ===== Chamada OpenAI =====
    safeLog("ü§ñ Chamando OpenAI...");
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt },
      ],
      temperature: 0.5,
      max_tokens: 3800,
      response_format: { type: "json_object" },
    });

    const content = completion.choices[0]?.message?.content;
    if (!content) throw new Error("Nenhum relat√≥rio foi gerado pela OpenAI");

    // ===== Parse e valida√ß√£o =====
    let report: ReportFreePayload;

    try {
      report = JSON.parse(content) as ReportFreePayload;

      if (
        !report?.header ||
        !report?.intro ||
        !report?.one_liner ||
        typeof report?.stage_confidence !== "number" ||
        !Array.isArray(report?.stage_signals) ||
        !Array.isArray(report?.personProfile) ||
        !Array.isArray(report?.personProfile_evidences) ||
        !Array.isArray(report?.relationshipOverview) ||
        !Array.isArray(report?.relationshipOverview_evidences) ||
        !report?.currentFeelings ||
        !Array.isArray(report?.currentFeelings_evidences) ||
        !report?.currentStage ||
        !Array.isArray(report?.currentStage_evidences) ||
        !Array.isArray(report?.whyCantMoveOn) ||
        !Array.isArray(report?.whyCantMoveOn_evidences) ||
        !Array.isArray(report?.rootCause) ||
        !Array.isArray(report?.rootCause_evidences) ||
        !Array.isArray(report?.unresolvedPoints) ||
        !Array.isArray(report?.learning) ||
        !Array.isArray(report?.learning_evidences) ||
        !report?.nextStepHint ||
        typeof report.nextStepHint.summary !== "string" ||
        typeof report.nextStepHint.why_full_report !== "string" ||
        !report?.closing_archetype ||
        typeof report.closing_archetype !== "string"
      ) {
        safeLog("‚ùå JSON inv√°lido (faltam campos):", Object.keys(report || {}));
        throw new Error("Estrutura do relat√≥rio inv√°lida");
      }

      if (report.header.segment !== report.currentStage.name) {
        safeLog(
          `‚ö†Ô∏è Inconsist√™ncia: header.segment (${report.header.segment}) !== currentStage.name (${report.currentStage.name}) ‚Äî ajustando.`
        );
        report.currentStage.name = report.header.segment;
      }

      if (report.stage_confidence < 0 || report.stage_confidence > 1) {
        safeLog(
          `‚ö†Ô∏è stage_confidence fora do range (${report.stage_confidence}), ajustando para 0.75`
        );
        report.stage_confidence = 0.75;
      }
    } catch (err) {
      safeLog("‚ùå Erro ao parsear JSON:", err);
      safeLog(
        "üìÑ Conte√∫do recebido (500 chars):",
        content.substring(0, 500) + "..."
      );
      throw new Error("Erro ao processar relat√≥rio (parse JSON)");
    }

    return NextResponse.json(
      {
        success: true,
        report,
        segment,
        days_since_breakup: daysSinceBreakup ?? null,
        generatedAt: new Date().toISOString(),
      },
      { headers: SECURITY_HEADERS }
    );
  } catch (error: any) {
    console.error("‚ùå ERRO GERAL ao gerar relat√≥rio:", error);

    if (error instanceof OpenAI.APIError) {
      return NextResponse.json(
        {
          error: "Erro ao processar solicita√ß√£o",
          details: (error as any).message,
        },
        { status: (error as any).status || 500, headers: SECURITY_HEADERS }
      );
    }

    const msg = (error as Error)?.message || "Erro ao gerar relat√≥rio";
    return NextResponse.json(
      { error: msg },
      { status: 500, headers: SECURITY_HEADERS }
    );
  }
}
